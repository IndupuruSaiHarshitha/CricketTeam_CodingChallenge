import { Component, OnInit, ViewChild } from '@angular/core';
import { Player } from '../models/player'; // <--- CHANGE THIS LINE
import { PlayersService } from '../services/players.service'; // <--- CHANGE THIS LINE
import { Router } from '@angular/router';
import { NgForm } from '@angular/forms';

@Component({
  selector: 'app-player-add',
  templateUrl: './player-add.component.html',
  styleUrls: ['./player-add.component.css']
})
export class PlayerAddComponent implements OnInit {

  newPlayer: Player = {
    playerId: 0, // ID will be generated by backend, set to 0 or null for new entries
    playerName: '',
    jerseyNumber: 0,
    role: '',
    teamName: ''
  };

  // @ViewChild is used to get a reference to the NgForm instance in the template
  // This allows you to access the form's state and controls for validation
  @ViewChild('playerForm') playerForm!: NgForm; // Ensure this matches #playerForm in HTML

  constructor(
    private playersService: PlayersService,
    private router: Router
  ) { }

  ngOnInit(): void {
    // You could also initialize the form with default values or fetch data here
  }

  addPlayer(): void {
    // Access individual form controls for validation using playerForm.controls
    const playerNameControl = this.playerForm.controls['playerName'];
    const jerseyNumberControl = this.playerForm.controls['jerseyNumber'];
    const roleControl = this.playerForm.controls['role'];
    const teamNameControl = this.playerForm.controls['teamName'];

    // Additional validation for jerseyNumber if not using HTML5 min/max fully
    if (this.newPlayer.jerseyNumber <= 0) {
        alert('Jersey Number must be a positive value.');
        return;
    }

    // Check if the overall form is valid before submitting
    if (this.playerForm.valid) {
      this.playersService.addPlayer(this.newPlayer).subscribe({
        next: (player) => {
          console.log('Player added:', player);
          alert(`Player '${player.playerName}' added successfully!`);
          this.resetForm(); // Clear the form after successful submission
          this.router.navigate(['/players']); // Navigate back to the player list
        },
        error: (err) => {
          console.error('Error adding player:', err);
          alert('Failed to add player. Check console for details.');
          // Display backend validation errors if available
          if (err.status === 400 && err.error) {
            console.error('Backend validation errors:', err.error);
            alert('Validation Error: ' + JSON.stringify(err.error));
          }
        }
      });
    } else {
      // If form is invalid, mark all fields as touched to display validation messages
      playerNameControl.markAsTouched();
      jerseyNumberControl.markAsTouched();
      roleControl.markAsTouched();
      teamNameControl.markAsTouched();
      alert('Please fill out the form correctly.');
    }
  }

  resetForm(): void {
    this.newPlayer = {
      playerId: 0,
      playerName: '',
      jerseyNumber: 0,
      role: '',
      teamName: ''
    };
    // Reset the form's validation state as well
    if (this.playerForm) {
      this.playerForm.resetForm();
    }
  }

  goBack(): void {
    this.router.navigate(['/players']); // Navigate back to the player list
  }
}